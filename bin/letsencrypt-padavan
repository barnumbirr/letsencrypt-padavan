#!/usr/bin/env bash

readonly PROJECT=letsencrypt-padavan
readonly VERSION=1.1.0

set -Eeuo pipefail

usage() {
    version
    die """
Usage: $PROJECT [parameters] <options>...

$PROJECT is a CLI tool written in BASH aimed at configuring Let's Encypt
certificates for devices running the padavan / rt-n56u firmware.

PARAMETERS:
-u, --user <username>    Specifies user used to connect to the device.
-p, --port <port>        Specifies SSH port used to connect to device.
-k, --key <file>         Specifies private SSH key used to connect to device.
-h, --host <host>        Specifies IP address used to connect to device.
-d, --domain <domain>    Specifies first domain used by certbot to generate\
 the certificate.
-c, --config <file>      Specifies config file from which to read values.

OPTIONS:
--help           Show this help log.
-v, --version    Show version info.
--no-color       Do not output colored text.
--verbose        Output debug information.

Report bugs to https://github.com/barnumbirr/letsencrypt-padavan/issues"""
}

version() {
    log "$PROJECT $VERSION"
}

log() {
    echo >&2 -e "${1-}"
}

die() {
    local log=$1
    log "$log"
    exit 1
}

setup_colors() {
  if test -t 2 && test -z "${NO_COLOR-}"; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' YELLOW=''
  fi
}

progressbar() {
    # Can't use log() because 'echo' sends a newline at the end of it's output.
    # We don't want that here as it breaks the progressbar display.
    printf "${GREEN}[✱]${NOFORMAT} ["
    while kill -0 "$PID" 2> /dev/null; do
        printf  "▓"
        sleep 0.1
    done
    printf "]\n"
}

parse_params() {
    PADAVAN_USER=''
    PADAVAN_SSH_PORT=''
    PADAVAN_PRIVATE_KEY=''
    PADAVAN_HOSTS=()
    DOMAIN=''

    while :; do
        case "${1-}" in
        --help)
            usage
            ;;
        -v | --version)
            die "$(version)"
            ;;
        --verbose)
            set -x
            ;;
        --no-color)
            NO_COLOR=1
            ;;
        -u | --user)
            PADAVAN_USER="${2-}"
            shift
            ;;
        -p | --port)
            PADAVAN_SSH_PORT="${2-}"
            shift
            ;;
        -k | --key)
            PADAVAN_PRIVATE_KEY="${2-}"
            shift
            ;;
        -h | --host)
            PADAVAN_HOSTS+=("${2-}")
            shift
            ;;
        -d | --domain)
            DOMAIN="${2-}"
            shift
            ;;
        -c | --config)
            CONFIG="${2-}"
            source "${CONFIG}"
            shift
            ;;
        -?*)
            die "Unknown option: $1
See --help for more details"
            ;;
        *)
            break
            ;;
        esac
        shift
    done

    return 0
}

connect() {
    device="ssh -qt -i ${PADAVAN_PRIVATE_KEY} ${PADAVAN_USER}@${host}\
 -p ${PADAVAN_SSH_PORT}"

    if $device true 2>/dev/null; then
        log "${GREEN}[✓]${NOFORMAT} Connection to device (${host}) successful!"
    else
        die "${RED}[✗]${NOFORMAT} Error connecting to device (${host})."
    fi
}

system_info() {
    # ASCII art taken from https://github.com/dylanaraps/pfetch
    log """        ____     $USER@$(uname -n)
       (.. |     os: $(uname -o)
       (<> |     kernel: $(uname -r)
      / __  \\    uptime: $(uptime | awk -F'( |,|:)+' '{d=h=m=0; if ($7=="min") m=$6; else\
 {if ($7~/^day/) {d=$6;h=$8;m=$9} else {h=$6;m=$7}}} {print d+0"d"h+0"h"m+0"m"}')
     ( /  \\ /|   cpu: $(awk -F'(: )+' '/^system type/{ print $2 }' /proc/cpuinfo)\
 ($(awk '/^processor/ { N++} END { print N }' /proc/cpuinfo) cores)
    _/\\ __)/_)   memory: $(free -m | awk 'NR==2{printf "%.0f/%.0fMB\n", $3/1000,$2/1000}')
    \/-____\/    shell: \"$SHELL\" """
}

check_certificate_exists() {
    if [ ! -f "${CERT_CHAIN}" ] && [ ! -f "${CERT_KEY}" ]; then
        die """
${RED}[✗]${NOFORMAT} Local file(s) not found, please generate the required\
 certificate(s) and retry:

    - \"${CERT_CHAIN}\"
    - \"${CERT_KEY}\"
"""
    fi
}

get_certificate_info() {
    if ! [ -x "$(command -v openssl)" ]; then
        :
    else
        CERTIFICATE=$(openssl x509 -noout -text -in "${CERT_CHAIN}")
        log """
${GREEN}[✱]${NOFORMAT} About to deploy \"${CERT_CHAIN}\":
        $(echo "${CERTIFICATE}" | grep 'Subject:' | sed -e 's/^\s*//' -e '/^$/d')
        $(echo "${CERTIFICATE}" | grep 'Not Before' | sed -e 's/^\s*//' -e '/^$/d')
        $(echo "${CERTIFICATE}" | grep 'Not After' | sed -e 's/^\s*//' -e '/^$/d')
        $(echo "${CERTIFICATE}" | grep 'DNS' | sed -e 's/^\s*//' -e '/^$/d')
"""
    fi
}

upload_files() {
    log "${GREEN}[✱]${NOFORMAT} Uploading certificate..."
    scp -q -P "${PADAVAN_SSH_PORT}" -i "${PADAVAN_PRIVATE_KEY}" "${CERT_CHAIN}"\
 "${PADAVAN_USER}"@"${host}":/etc/storage/https/server.crt & PID=$!
    progressbar

    RESULT=$?

    if [[ $RESULT == 0 ]]; then
        log "${GREEN}[✓]${NOFORMAT} Certificate uploaded successfully."
    else
        die "${RED}[✗]${NOFORMAT} Certificate upload failed."
    fi

    log "${GREEN}[✱]${NOFORMAT} Uploading key..."
    scp -q  -P "${PADAVAN_SSH_PORT}" -i "${PADAVAN_PRIVATE_KEY}" "${CERT_KEY}"\
 "${PADAVAN_USER}"@"${host}":/etc/storage/https/server.key & PID=$!
    progressbar

    RESULT=$?

    if [[ $RESULT == 0 ]]; then
        log "${GREEN}[✓]${NOFORMAT} Certificate key uploaded successfully."
    else
        die "${RED}[✗]${NOFORMAT} Certificate key upload failed."
    fi
}

restart_httpd() {
    killall httpd && /usr/sbin/httpd -s 443

    RESULT=$?

    if [[ $RESULT == 0 ]]; then
        log "${GREEN}[✓]${NOFORMAT} httpd restarted successfully! Device\
 should now be accessible over HTTPS.\n"
    else
        die "${RED}[✗]${NOFORMAT} httpd restart failed on device.\n"
    fi
}

main() {
    readonly CERT_CHAIN=/etc/letsencrypt/live/${DOMAIN}/cert.pem
    readonly CERT_KEY=/etc/letsencrypt/live/${DOMAIN}/privkey.pem

    check_certificate_exists
    get_certificate_info

    for host in "${PADAVAN_HOSTS[@]}"; do
        connect
        $device "$(declare -f log die system_info); system_info"
        upload_files
        $device "$(declare -f log die setup_colors restart_httpd); setup_colors; restart_httpd"
    done
}

parse_params "$@"
setup_colors
main
