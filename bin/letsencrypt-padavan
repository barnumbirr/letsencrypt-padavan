#!/usr/bin/env bash

readonly PROJECT=letsencrypt-padavan
readonly VERSION=0.0.1

set -Eeuo pipefail

usage() {
    version
    cat <<- EOF

Usage: $PROJECT [parameters] <options>...

$PROJECT is a CLI tool written in BASH aimed at configuring Let's Encypt
certificates for devices running the padavan / rt-n56u firmware.

PARAMETERS:
-u, --user <username>    Specifies user used to connect to the device.
-p, --port <port>        Specifies SSH port used to connect to device.
-k, --key <file>         Specifies private SSH key used to connect to device.
-h, --host <host>        Specifies IP address used to connect to device.
-d, --domain <domain>    Specifies first domain used by certbot to generate the certificate.
-c, --config <file>      Specifies config file from which to read values.

OPTIONS:
--help           Show this help log.
-v, --version    Show version info.
--no-color       Do not output colored text.
--verbose        Output debug information.

Report bugs to https://github.com/barnumbirr/letsencrypt-padavan/issues

EOF
    exit 1
}

version() {
    log "$PROJECT $VERSION"
}

log() {
    echo >&2 -e "${1-}"
}

die() {
    log "$1"
    exit 1
}

setup_colors() {
  if test -t 2 && test -z "${NO_COLOR-}"; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m'\
    BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

progress_spinner() {
    local message="$1"
    local pid=$!
    local delay=0.1
    local spinstr='|/-\'
    while kill -0 $pid 2> /dev/null; do
        local temp=${spinstr#?}
        printf "[%c] $message" "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        local reset="\b\b\b\b\b\b"
        for ((i=1; i<=$(echo "$message" | wc -c); i++)); do
            reset+="\b"
        done
        printf $reset
    done
}

parse_params() {
    PADAVAN_USER=''
    PADAVAN_SSH_PORT=''
    PADAVAN_PRIVATE_KEY=''
    PADAVAN_HOSTS=()
    DOMAIN=''

    while :; do
        case "${1-}" in
        --help)
            usage
            ;;
        -v | --version)
            version
            exit 1
            ;;
        --verbose)
            set -x
            ;;
        --no-color)
            NO_COLOR=1
            ;;
        -u | --user)
            PADAVAN_USER="${2-}"
            shift
            ;;
        -p | --port)
            PADAVAN_SSH_PORT="${2-}"
            shift
            ;;
        -k | --key)
            PADAVAN_PRIVATE_KEY="${2-}"
            shift
            ;;
        -h | --host)
            PADAVAN_HOSTS+=("${2-}")
            shift
            ;;
        -d | --domain)
            DOMAIN="${2-}"
            shift
            ;;
        -c | --config)
            CONFIG="${2-}"
            source "${CONFIG}"
            shift
            ;;
        -?*)
            die "Unknown option: $1\nSee --help for more details"
            ;;
        *)
            break
            ;;
        esac
        shift
    done

    return 0
}

connect() {
    device="ssh -i ${PADAVAN_PRIVATE_KEY} ${PADAVAN_USER}@${host}\
 -p ${PADAVAN_SSH_PORT}"

    RESULT=$?
    if [[ ! $RESULT == 0 ]]; then
        die "${RED}[✗] Error connecting to device. (${host})${NOFORMAT}"
    else
        log "${GREEN}[✓] Connection to device (${host}) successful!${NOFORMAT}"
    fi
}

system_info() {
    # ASCII art taken from https://github.com/dylanaraps/pfetch
    cat <<- EOF

        ____     $USER@$(uname -n)
       (.. |     os: $(uname -o)
       (<> |     kernel: $(uname -r)
      / __  \\    uptime: $(uptime | awk -F'( |,|:)+' '{d=h=m=0; if ($7=="min") m=$6; else\
 {if ($7~/^day/) {d=$6;h=$8;m=$9} else {h=$6;m=$7}}} {print d+0"d"h+0"h"m+0"m"}')
     ( /  \\ /|   cpu: $(awk -F'(: )+' '/^system type/{ print $2 }' /proc/cpuinfo)\
 ($(awk '/^processor/ { N++} END { print N }' /proc/cpuinfo) cores)
    _/\\ __)/_)   memory: $(free -m | awk 'NR==2{printf "%.0f/%.0fMB\n", $3/1000,$2/1000}')
    \/-____\/    shell: $(printf "$SHELL")

EOF
}

check_certificate() {
    if [ ! -f "$CERT_CHAIN" ] && [ ! -f "$CERT_KEY" ]; then
        cat <<- EOF

Local file(s) not found:
   - $CERT_CHAIN
   - $CERT_KEY

Please generate the required certificate and retry.

EOF
        exit 1
    fi
}

upload_files() {
    scp -q -P "${PADAVAN_SSH_PORT}" -i "${PADAVAN_PRIVATE_KEY}" "${CERT_CHAIN}"\
 "${PADAVAN_USER}"@"${host}":/etc/storage/https/server.crt &
    scp -q  -P "${PADAVAN_SSH_PORT}" -i "${PADAVAN_PRIVATE_KEY}" "${CERT_KEY}"\
 "${PADAVAN_USER}"@"${host}":/etc/storage/https/server.key &
    progress_spinner "Uploading certificate and key..."
    if [ $? -eq 0 ];
    then
        log "${GREEN}[✓] Certificate and key uploaded successfully.${NOFORMAT}"
    else
        die "${RED}[✗] Certificate and key upload failed.${NOFORMAT}"
    fi
}

restart_httpd() {
    killall httpd && /usr/sbin/httpd -s 443
    if [ $? -eq 0 ];
    then
        log "\033[0;32m[✓] httpd restarted successfully! Device should now be accessible\
 over HTTPS.\033[0m"
        # log "${GREEN}[✓] httpd restarted successfully! Device should now be accessible\
# over HTTPS.${NOFORMAT}"
    else
        die "\033[0;31m[✗] httpd restart failed on device.\033[0m"
        # die "${RED}[✗] httpd restart failed on device.${NOFORMAT}"
    fi
}

main() {
    readonly CERT_CHAIN=/etc/letsencrypt/live/${DOMAIN}/cert.pem
    readonly CERT_KEY=/etc/letsencrypt/live/${DOMAIN}/privkey.pem

    for host in "${PADAVAN_HOSTS[@]}"; do
        check_certificate
        connect
        $device "$(declare -f log die system_info); system_info"
        upload_files
        $device "$(declare -f log restart_httpd); restart_httpd"
    done
}

parse_params "$@"
setup_colors
main
